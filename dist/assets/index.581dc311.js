const p=function(){const i=document.createElement("link").relList;if(i&&i.supports&&i.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))t(n);new MutationObserver(n=>{for(const a of n)if(a.type==="childList")for(const s of a.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&t(s)}).observe(document,{childList:!0,subtree:!0});function r(n){const a={};return n.integrity&&(a.integrity=n.integrity),n.referrerpolicy&&(a.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?a.credentials="include":n.crossorigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function t(n){if(n.ep)return;n.ep=!0;const a=r(n);fetch(n.href,a)}};p();var style="";class layer{constructor(i,r){this.length=i,this.inputLength=r,this.weights=[],this.costGradientWeight=[],this.costGradientBias=[],this.bias=[];for(var t=0;t<this.length;t++){this.costGradientBias[t]=0,this.costGradientWeight[t]=[],this.weights[t]=[];for(var n=0;n<this.inputLength;n++)this.costGradientWeight[t][n]=0,this.weights[t][n]=n%this.length==t%this.inputLength?1:0;this.bias[t]=0}}clearGradient(){for(var i=0;i<this.length;i++){for(var r=0;r<this.inputLength;r++)this.costGradientWeight[i][r]=0;this.costGradientBias[i]=0}}reLu(i){return i>0?i:0}Predict(i){for(var r=[],t=0;t<this.length;t++){r[t]=this.bias[t];for(var n=0;n<this.inputLength;n++)r[t]+=this.weights[t][n]*i[n];r[t]=this.reLu(r[t])}return r}CollectData(i){var r=[];i=i;for(var t=0;t<this.length;t++){for(var n=this.bias[t],a=0;a<this.inputLength;a++)n+=this.weights[t][a]*i[a];const s=n,o=this.reLu(n);r[t]={activations:o,nonActivations:s}}return{output:r,input:i}}applyCostGradient(){for(var i=0;i<this.length;i++){for(var r=0;r<this.inputLength;r++)this.weights[i][r]-=this.costGradientWeight[i][r]/(this.inputLength*this.length);this.bias[i]-=this.costGradientBias[i]/(this.inputLength*this.length)}}nodeCostDerivative(i,r){return 2*(i-r)}activationDerivative(i){return i>0?2:1}CalculateNodeValues(i,r){for(var t=[],n=0;n<this.length;n++){const a=this.nodeCostDerivative(i.output[n].activations,r[n]);t[n]=a}return t}CalculateHiddenLayerNodeValues(i,r,t,n){const a=[];for(var s=0;s<this.length;s++){for(var o=0,h=0;h<t.length;h++){const c=r.weights[h][s];o+=t[h]*c}a[s]=o*this.activationDerivative(i.output[s].nonActivations)/n}return a}updateGradients(i,r){for(var t=0;t<this.length;t++){for(var n={value:0,bad:0},a={value:0,bad:0},s=0;s<this.inputLength;s++){for(var o=0,h=0,c=0;c<r.length;c++)o+=r[c][t]*i[c].input[s],h+=r[c][t];var v=Math.abs(o);v>n.bad&&(n={value:o/r.length,bad:v,inputId:s});var d=Math.abs(h);d>a.bad&&(a={value:h/r.length,badBias:d,inputId:s})}n.value!=0&&(this.costGradientWeight[t][n.inputId]=n.value),a.value!=0&&(this.costGradientBias[t]=a.value*1)}}}class network{constructor(...i){this.layers=[];for(var r=0;r<i.length;r++)this.layers[r]=new layer(i[r],i[r-1]||0);this.learnRate=.1}updateAllGradients(i,r){var t=this.layers[this.layers.length-1],n=[];const a=[],s=[];for(var o=0;o<i.length;o++)s[o]=this.Fill(i[o]),n.push(t.CalculateNodeValues(s[o][this.layers.length-2],r[o])),a.push(s[o][this.layers.length-2]);t.updateGradients(a,n);for(var h=this.layers.length-3;h>=0;h--){const c=this.layers[h+1],v=[],d=[];for(var o=0;o<i.length;o++)v.push(c.CalculateHiddenLayerNodeValues(s[o][h],t,n[o],this.layers.length-1)),d.push(s[o][h]);c.updateGradients(d,v),n=v,t=c}}Predict(i){for(var r=i,t=1;t<this.layers.length;t++)r=this.layers[t].Predict(r);return r}Fill(i){for(var r=[],t=this.layers[1].CollectData(i),n=2;n<this.layers.length;n++)r.push(t),t=this.layers[n].CollectData(t.output.map(a=>a.activations));return r.push(t),r}Learn(i,r,t){for(var n=0;n<t;n++){this.updateAllGradients(i,r);for(var a=1;a<this.layers.length;a++)this.layers[a].applyCostGradient();for(const s of this.layers)s.clearGradient()}}}var nodeIndex=0;const nodeConnection={};function renderLayer(l){var i=document.createElement("div");i.className="svg-container";var r=document.createElementNS("http://www.w3.org/2000/svg","svg");r.style.height="100vh",r.style.width="100px";var t=document.createElementNS("http://www.w3.org/2000/svg","rect");t.setAttribute("width","60px"),t.classList.add("node-container"),t.setAttribute("x","20px"),r.appendChild(t);const n=document.documentElement.clientHeight,a=n/(l.length+1),s=n-a,o=35;t.setAttribute("height",n-a*2+o*2+"px"),t.setAttribute("y",a-o+"px");for(var h=0;h<l.length;h++){const c=document.createElementNS("http://www.w3.org/2000/svg","circle");c.setAttribute("cx","50px"),c.setAttribute("cy",s/l.length*h+a+"px"),c.classList.add("node"),c.id="node-"+nodeIndex++,c.addEventListener("mouseover",v=>{for(const d of nodeConnection[c.id])d.classList.add("connection-active")}),c.addEventListener("mouseout",v=>{for(const d of nodeConnection[c.id])d.classList.remove("connection-active")}),r.appendChild(c)}return i.appendChild(r),i}function renderNetwork(l){var i=document.createElement("div");const r=document.documentElement.clientWidth,t=document.documentElement.clientHeight;var n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("width",r+"px"),n.setAttribute("height",t+"px"),i.appendChild(n);const a=r/(l.layers.length+1),s=r-a;for(var o=null,h=null,c=0;c<l.layers.length;c++){const E=l.layers[c],m=renderLayer(E);m.style.position="absolute";var v=a-35+s/l.layers.length*c;m.style.left=v+"px";const k=m.querySelectorAll(".node"),C=v+50+"px";var d=Math.max(...E.weights.map(f=>Math.max(...f)));if(o!=null){var L=0;for(const f of o){var b=0;for(const w of k){const u=document.createElementNS("http://www.w3.org/2000/svg","line");nodeConnection[f.id]==null&&(nodeConnection[f.id]=[]),nodeConnection[w.id]==null&&(nodeConnection[w.id]=[]),nodeConnection[w.id].push(u),nodeConnection[f.id].push(u),u.setAttribute("x1",h),u.setAttribute("y1",f.getAttribute("cy")),u.setAttribute("x2",C),u.setAttribute("y2",w.getAttribute("cy"));var g=E.weights[b][L]/d*255;g=g/4+100,u.setAttribute("stroke",`rgb(${g},${g},${g})`),u.classList.add("connection"),n.appendChild(u),b++}L++}}o=k,h=C,i.appendChild(m)}return i}const app=document.querySelector("#app"),networkShapeElement=document.getElementById("network-shape"),xElement=document.getElementById("x"),yElement=document.getElementById("y");var input=document.getElementById("input"),output=document.getElementById("output"),fields=[];function model(l,i,r){const t=document.querySelector(l);return fields.push(t),t.value=i,t.addEventListener("keydown",n=>{n.keyCode===13&&(r(t.value),localStorage.setItem(l,t.value))}),t}const uploadElement=document.getElementById("upload");uploadElement.addEventListener("click",e=>{const fileElement=document.createElement("input");fileElement.type="file",fileElement.click(),fileElement.onchange=e=>{const file=fileElement.files[0],reader=new FileReader;reader.addEventListener("load",e=>{const result=JSON.parse(reader.result);for(const l of fields)l.value=result[l.id],localStorage.setItem(l.id,result[l.id]);myNetwork=new network(...eval(`[${networkShapeElement.value}]`)),x=eval(`[${xElement.value}]`),y=eval(`[${yElement.value}]`),train()}),reader.readAsText(file)}});const downloadElement=document.getElementById("download");downloadElement.addEventListener("click",l=>{const i={};for(const a of fields)i[a.id]=a.value;const r=new Blob([JSON.stringify(i,null,2)],{type:"application/json"}),t=URL.createObjectURL(r),n=document.createElement("a");n.href=t,n.download="model.json",n.click()});model("#network-shape","2,2",networkShape=>{myNetwork=new network(...eval(`[${networkShape}]`)),train()});model("#x","[1,2], [2,1]",xv=>{x=eval(`[${xv}]`),myNetwork=new network(...eval(`[${networkShapeElement.value}]`)),train()});model("#y","[2,1], [1,2]",yv=>{y=eval(`[${yv}]`),myNetwork=new network(...eval(`[${networkShapeElement.value}]`)),train()});model("#input","1,2",l=>{update()});var myNetwork=new network(...eval(`[${networkShapeElement.value}]`)),x=eval(`[${xElement.value}]`),y=eval(`[${yElement.value}]`);function update(){input.value!=""&&(output.value=myNetwork.Predict(eval(`[${input.value}]`)).map(l=>Math.round(l)))}const stdout=document.getElementById("stdout");function train(){myNetwork.Learn(x,y,1e3),stdout.innerHTML=JSON.stringify(myNetwork.layers.slice(1).map(l=>[...l.weights.map(i=>i.map(r=>{var t=r.toFixed(2);return t==0?0:Number(t)})),...l.bias.map(i=>{var r=i.toFixed(2);return r==0?0:Number(r)})]),null,2).replace(/\n/g,"<br>").replace(/ /g,"&nbsp;"),update(),app.innerHTML="",app.appendChild(renderNetwork(myNetwork))}train();
